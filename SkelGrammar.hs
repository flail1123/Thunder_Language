-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: Show a => AbsGrammar.Program' a -> Result
transProgram x = case x of
  AbsGrammar.Program _ stmts -> failure x

transBlock :: Show a => AbsGrammar.Block' a -> Result
transBlock x = case x of
  AbsGrammar.Block _ stmts -> failure x

transStmt :: Show a => AbsGrammar.Stmt' a -> Result
transStmt x = case x of
  AbsGrammar.FnDef _ type_ ident args block -> failure x
  AbsGrammar.Skip _ -> failure x
  AbsGrammar.BStmt _ block -> failure x
  AbsGrammar.Decl _ type_ items -> failure x
  AbsGrammar.CDecl _ type_ items -> failure x
  AbsGrammar.Ass _ ident bracketes expr -> failure x
  AbsGrammar.Incr _ ident -> failure x
  AbsGrammar.Decr _ ident -> failure x
  AbsGrammar.MulIdent _ ident expr -> failure x
  AbsGrammar.SubIdent _ ident expr -> failure x
  AbsGrammar.AddIdent _ ident expr -> failure x
  AbsGrammar.DivIdent _ ident expr -> failure x
  AbsGrammar.ModIdent _ ident expr -> failure x
  AbsGrammar.Ret _ expr -> failure x
  AbsGrammar.VRet _ -> failure x
  AbsGrammar.Cond _ expr block -> failure x
  AbsGrammar.CondElse _ expr block1 block2 -> failure x
  AbsGrammar.While _ expr block -> failure x
  AbsGrammar.For _ arg expr block -> failure x
  AbsGrammar.BreakStmt _ -> failure x
  AbsGrammar.ContinueStmt _ -> failure x
  AbsGrammar.Print _ exprs -> failure x
  AbsGrammar.SApp _ ident exprs -> failure x
  AbsGrammar.SAppEmpty _ ident -> failure x
  AbsGrammar.TupleAss _ tupleident expr -> failure x

transArg :: Show a => AbsGrammar.Arg' a -> Result
transArg x = case x of
  AbsGrammar.Arg _ type_ ident -> failure x
  AbsGrammar.CArg _ type_ ident -> failure x

transItem :: Show a => AbsGrammar.Item' a -> Result
transItem x = case x of
  AbsGrammar.NoInit _ ident -> failure x
  AbsGrammar.Init _ ident expr -> failure x

transBracketE :: Show a => AbsGrammar.BracketE' a -> Result
transBracketE x = case x of
  AbsGrammar.BracketE _ expr -> failure x

transTupleItem :: Show a => AbsGrammar.TupleItem' a -> Result
transTupleItem x = case x of
  AbsGrammar.TupleItem _ ident -> failure x
  AbsGrammar.TupleItemU _ -> failure x
  AbsGrammar.TupleItemRek _ tupleident -> failure x

transTupleIdent :: Show a => AbsGrammar.TupleIdent' a -> Result
transTupleIdent x = case x of
  AbsGrammar.TupleIdents _ tupleitem tupleitems -> failure x

transType :: Show a => AbsGrammar.Type' a -> Result
transType x = case x of
  AbsGrammar.IntT _ -> failure x
  AbsGrammar.StrT _ -> failure x
  AbsGrammar.BoolT _ -> failure x
  AbsGrammar.NoneT _ -> failure x
  AbsGrammar.ListT _ type_ -> failure x
  AbsGrammar.TupleT _ types -> failure x
  AbsGrammar.FunT _ type_ types -> failure x

transExpr :: Show a => AbsGrammar.Expr' a -> Result
transExpr x = case x of
  AbsGrammar.Len _ expr -> failure x
  AbsGrammar.NoneExpr _ -> failure x
  AbsGrammar.AnyListExpr _ exprlist -> failure x
  AbsGrammar.Access _ expr1 expr2 -> failure x
  AbsGrammar.EApp _ ident exprs -> failure x
  AbsGrammar.EAppEmpty _ ident -> failure x
  AbsGrammar.TupleExpr _ expr exprs -> failure x
  AbsGrammar.EVar _ ident -> failure x
  AbsGrammar.ELitInt _ integer -> failure x
  AbsGrammar.ELitTrue _ -> failure x
  AbsGrammar.ELitFalse _ -> failure x
  AbsGrammar.EString _ string -> failure x
  AbsGrammar.Neg _ expr -> failure x
  AbsGrammar.Not _ expr -> failure x
  AbsGrammar.EMul _ expr1 mulop expr2 -> failure x
  AbsGrammar.EAdd _ expr1 addop expr2 -> failure x
  AbsGrammar.ERel _ expr1 relop expr2 -> failure x
  AbsGrammar.EEq _ expr1 eqop expr2 -> failure x
  AbsGrammar.EAnd _ expr1 expr2 -> failure x
  AbsGrammar.EOr _ expr1 expr2 -> failure x

transExprList :: Show a => AbsGrammar.ExprList' a -> Result
transExprList x = case x of
  AbsGrammar.AllocList _ type_ exprs -> failure x
  AbsGrammar.EList _ exprs -> failure x
  AbsGrammar.ERange _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsGrammar.AddOp' a -> Result
transAddOp x = case x of
  AbsGrammar.Plus _ -> failure x
  AbsGrammar.Minus _ -> failure x

transMulOp :: Show a => AbsGrammar.MulOp' a -> Result
transMulOp x = case x of
  AbsGrammar.Times _ -> failure x
  AbsGrammar.Div _ -> failure x
  AbsGrammar.Mod _ -> failure x

transRelOp :: Show a => AbsGrammar.RelOp' a -> Result
transRelOp x = case x of
  AbsGrammar.LTH _ -> failure x
  AbsGrammar.LE _ -> failure x
  AbsGrammar.GTH _ -> failure x
  AbsGrammar.GE _ -> failure x

transEqOp :: Show a => AbsGrammar.EqOp' a -> Result
transEqOp x = case x of
  AbsGrammar.EQU _ -> failure x
  AbsGrammar.NE _ -> failure x

-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language grammar.

module AbsGrammar where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Program a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Block a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = FnDef a (Type' a) Ident [Arg' a] (Block' a)
    | Skip a
    | BStmt a (Block' a)
    | Decl a (Type' a) [Item' a]
    | CDecl a (Type' a) [Item' a]
    | Ass a Ident [BracketE' a] (Expr' a)
    | Incr a Ident
    | Decr a Ident
    | MulIdent a Ident (Expr' a)
    | SubIdent a Ident (Expr' a)
    | AddIdent a Ident (Expr' a)
    | DivIdent a Ident (Expr' a)
    | ModIdent a Ident (Expr' a)
    | Ret a (Expr' a)
    | VRet a
    | Cond a (Expr' a) (Block' a)
    | CondElse a (Expr' a) (Block' a) (Block' a)
    | While a (Expr' a) (Block' a)
    | For a (Arg' a) (Expr' a) (Block' a)
    | BreakStmt a
    | ContinueStmt a
    | Print a [Expr' a]
    | SApp a Ident [Expr' a]
    | SAppEmpty a Ident
    | TupleAss a (TupleIdent' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = Arg a (Type' a) Ident | CArg a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Item = Item' BNFC'Position
data Item' a = NoInit a Ident | Init a Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type BracketE = BracketE' BNFC'Position
data BracketE' a = BracketE a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TupleItem = TupleItem' BNFC'Position
data TupleItem' a
    = TupleItem a Ident | TupleItemU a | TupleItemRek a (TupleIdent' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TupleIdent = TupleIdent' BNFC'Position
data TupleIdent' a = TupleIdents a (TupleItem' a) [TupleItem' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = IntT a
    | StrT a
    | BoolT a
    | NoneT a
    | ListT a (Type' a)
    | TupleT a [Type' a]
    | FunT a (Type' a) [Type' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = Len a (Expr' a)
    | NoneExpr a
    | AnyListExpr a (ExprList' a)
    | Access a (Expr' a) (Expr' a)
    | EApp a Ident [Expr' a]
    | EAppEmpty a Ident
    | TupleExpr a (Expr' a) [Expr' a]
    | EVar a Ident
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | EString a String
    | Neg a (Expr' a)
    | Not a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EEq a (Expr' a) (EqOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ExprList = ExprList' BNFC'Position
data ExprList' a
    = AllocList a (Type' a) [Expr' a]
    | EList a [Expr' a]
    | ERange a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type EqOp = EqOp' BNFC'Position
data EqOp' a = EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Block where
  hasPosition = \case
    Block p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    FnDef p _ _ _ _ -> p
    Skip p -> p
    BStmt p _ -> p
    Decl p _ _ -> p
    CDecl p _ _ -> p
    Ass p _ _ _ -> p
    Incr p _ -> p
    Decr p _ -> p
    MulIdent p _ _ -> p
    SubIdent p _ _ -> p
    AddIdent p _ _ -> p
    DivIdent p _ _ -> p
    ModIdent p _ _ -> p
    Ret p _ -> p
    VRet p -> p
    Cond p _ _ -> p
    CondElse p _ _ _ -> p
    While p _ _ -> p
    For p _ _ _ -> p
    BreakStmt p -> p
    ContinueStmt p -> p
    Print p _ -> p
    SApp p _ _ -> p
    SAppEmpty p _ -> p
    TupleAss p _ _ -> p

instance HasPosition Arg where
  hasPosition = \case
    Arg p _ _ -> p
    CArg p _ _ -> p

instance HasPosition Item where
  hasPosition = \case
    NoInit p _ -> p
    Init p _ _ -> p

instance HasPosition BracketE where
  hasPosition = \case
    BracketE p _ -> p

instance HasPosition TupleItem where
  hasPosition = \case
    TupleItem p _ -> p
    TupleItemU p -> p
    TupleItemRek p _ -> p

instance HasPosition TupleIdent where
  hasPosition = \case
    TupleIdents p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    IntT p -> p
    StrT p -> p
    BoolT p -> p
    NoneT p -> p
    ListT p _ -> p
    TupleT p _ -> p
    FunT p _ _ -> p

instance HasPosition Expr where
  hasPosition = \case
    Len p _ -> p
    NoneExpr p -> p
    AnyListExpr p _ -> p
    Access p _ _ -> p
    EApp p _ _ -> p
    EAppEmpty p _ -> p
    TupleExpr p _ _ -> p
    EVar p _ -> p
    ELitInt p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    EString p _ -> p
    Neg p _ -> p
    Not p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EEq p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition ExprList where
  hasPosition = \case
    AllocList p _ _ -> p
    EList p _ -> p
    ERange p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p

instance HasPosition EqOp where
  hasPosition = \case
    EQU p -> p
    NE p -> p

